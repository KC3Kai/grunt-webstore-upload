{"name":"Grunt-webstore-upload","tagline":"Automate uploading process of the new versions of Chrome Extension or App to Chrome Webstore","body":"# grunt-webstore-upload\r\n\r\n> Automate uploading process of the new versions of Chrome Extension or App to Chrome Webstore\r\n\r\n## Getting Started\r\nThis plugin requires Grunt.\r\n\r\nIf you haven't used [Grunt](http://gruntjs.com/) before, be sure to check out the [Getting Started](http://gruntjs.com/getting-started) guide, as it explains how to create a [Gruntfile](http://gruntjs.com/sample-gruntfile) as well as install and use Grunt plugins. Once you're familiar with that process, you may install this plugin with this command:\r\n\r\n```shell\r\nnpm install grunt-webstore-upload --save-dev\r\n```\r\n\r\nOnce the plugin has been installed, it may be enabled inside your Gruntfile with this line of JavaScript:\r\n\r\n```js\r\ngrunt.loadNpmTasks('grunt-webstore-upload');\r\n```\r\n\r\n## The \"webstore_upload\" task\r\n\r\n### Overview\r\nRead more about great ability to automate this task here: [Chrome Web Store Publish API](http://developer.chrome.com/webstore/using_webstore_api).\r\nIn your project's Gruntfile, add a section named `webstore_upload` to the data object passed into `grunt.initConfig()`.\r\n#### Please note, that you have to upload your extension first time manually, and then provide appID to update ( see below ). Also please make sure, that your draft ready to be published, ie all required fields was populated\r\n\r\n```js\r\ngrunt.initConfig({\r\n    webstore_upload: {\r\n        \"accounts\": {\r\n            \"default\": { //account under this section will be used by default\r\n                publish: true, //publish item right after uploading. default false\r\n                client_id: \"ie204es2mninvnb.apps.googleusercontent.com\",\r\n                client_secret: \"LEJDeBHfS\"\r\n            },\r\n            \"other_account\": {\r\n                publish: true, //publish item right after uploading. default false\r\n                client_id: \"ie204es2mninvnb.apps.googleusercontent.com\",\r\n                client_secret: \"LEJDeBHfS\",\r\n                refresh_token: \"1/eeeeeeeeeeeeeeeeeeeeeee_aaaaaaaaaaaaaaaaaaa\"\r\n            },\r\n            \"new_account\": { \r\n                cli_auth: true, // Use server-less cli prompt go get access token. Default false\r\n                publish: true, //publish item right after uploading. default false\r\n                client_id: \"kie204es2mninvnb.apps.googleusercontent.com\",\r\n                client_secret: \"EbDeHfShcj\"\r\n            }\r\n        },\r\n        \"extensions\": {\r\n            \"extension1\": {\r\n                //required\r\n                appID: \"jcbeonnlikcefedeaijjln\",\r\n                //required, we can use dir name and upload most recent zip file\r\n                zip: \"test/files/test1.zip\"      \r\n            },\r\n            \"extension2\": {\r\n                account: \"new_account\",\r\n                //will rewrite values from 'account' section\r\n                publish: false, \r\n                appID: \"jcbeonnlplijjln\",\r\n                zip: \"test/files/test2.zip\"\r\n            }\r\n        }\r\n    }\r\n})\r\n```\r\n\r\n### Configuration\r\n\r\n#### accounts\r\nList of the accounts (see *Accounts* section for details).\r\n\r\nType: `Object`\r\n\r\nRequired\r\n\r\n#### extensions\r\nList of the extension (see *Extensions* section for details).\r\n\r\nType: `Object`\r\n\r\nRequired\r\n\r\n### Accounts\r\nSince Google allows only 20 extensions under one account, you can create multiple records here.\r\nIt is object with arbitrary meaningful accounts names as a keys (see example above).\r\nSpecial account named `default` will be used by defaults.\r\n\r\n#### publish\r\nMake item available at Chrome Webstore or not\r\n\r\nType: `Boolean`\r\n\r\nDefault value: `false`\r\n\r\nOptional\r\n\r\n#### client_id\r\n[How to get it](http://developer.chrome.com/webstore/using_webstore_api#beforeyoubegin)\r\nClient ID to access to Chrome Console API\r\n\r\nType: `String`\r\n\r\nRequired\r\n\r\n#### client_secret\r\n[How to get it](http://developer.chrome.com/webstore/using_webstore_api#beforeyoubegin)\r\nClient Secret to access to Chrome Console API\r\n\r\nType: `String`\r\n\r\nRequired\r\n\r\n#### refresh_token\r\n[How to get it](http://developer.chrome.com/webstore/using_webstore_api#beforeyoubegin)\r\nRefresh token for the Chrome Console API\r\n\r\nType: `String`\r\n\r\nOptional\r\n\r\n\r\n### Extensions\r\nIt is object with arbitrary meaningful extensions names as a keys (see example above).\r\n\r\n#### appID\r\nExtension id or Application id at Chrome Webstore\r\n\r\nType: `String`\r\n\r\nRequired\r\n\r\n#### zip\r\nPath to zip file. Upload most recent zip file in case of path is directory\r\n\r\nType: `String`\r\n\r\nRequired\r\n\r\n#### publish\r\nMake item available at Chrome Webstore or not. \r\nThis option under `extensions` will rewrite `publish` under related `account` section.\r\n\r\nType: `Boolean`\r\n\r\nDefault value: `false`\r\n\r\nOptional\r\n\r\n#### publishTarget\r\nMake item available at . \r\nSee https://developer.chrome.com/webstore/webstore_api/items/publish\r\nCan be `trustedTesters` or `default`\r\n\r\nType: `String`\r\n\r\nDefault value: `default`\r\n\r\nOptional\r\n\r\n#### account\r\nName of the account, that we should use to upload extension. If ommited, `default` account will be used.\r\n\r\nType: `String`\r\n\r\nDefault value: `default`\r\n\r\nOptional\r\n\r\n### Migrating from < 0.7 versions\r\nIn order to move your existing config to new version, do following steps:\r\n- Create new keys in config `accounts`, `extensions`  \r\n- Remove `browser_path` from `options`\r\n- Move `publish`, `client_id`, `client_secret` from `options` to `default` account\r\n- Move all exntentions to `extension` section.\r\n- Move `publish`, `zip`, `appID` from `options` of the extension to one level up\r\n- Ask me, if something still broken :P\r\n\r\n### Workflow\r\nRead more about [Chrome Web Store Publish API](http://developer.chrome.com/webstore/using_webstore_api) and how to get Client ID and Client secret\r\n+ execute `grunt webstore_upload` or `grunt webstore_upload:target` in order to upload zip files\r\n+ browser should be opened\r\n+ confirm privileges in browser ( we have to manually do this )\r\n+ wait until uploading will be finished\r\n\r\nTo automatically pull a new access token using a refresh token just set the `refresh_token` property in your configuration.  If the `refresh_token` is present\r\nit will automatically refresh the token for you without any manual intervention.\r\n\r\n\r\n## Contributing\r\nIn lieu of a formal styleguide, take care to maintain the existing coding style. Add unit tests for any new or changed functionality. Lint and test your code using [Grunt](http://gruntjs.com/).\r\n\r\n## Release History\r\n0.7.0 Allowed multiple accounts. Async multiple uploading. Redo configuration style.\r\n\r\n0.5.1 Fix problem with path\r\n\r\n0.5.0 Initial commit\r\n\r\n## License\r\nCopyright (c) 2014 Anton Sivolapov. Licensed under the MIT license.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}